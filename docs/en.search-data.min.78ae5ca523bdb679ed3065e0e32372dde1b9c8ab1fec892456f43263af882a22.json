[{"id":0,"href":"/computer_organization/encode/%E8%A1%A8%E7%A4%BA/","title":"2.1 整数和定点小数编码","section":"第二章 编码","content":"\r整数和定点小数编码\r#\r无符号整数\r#\r​\t机器字长决定位数上限\n​\t减法运算：减数取反，末位加1后做加法\n带符号整数（定点整数）\r#\r原码与补码\r#\r原码：符号位+数值位\n​\t表示范围和个数（0的两种）\n​\t符号位不能参与运算，硬件电路很麻烦成本很高，所以发明了补码\n反码：中间状态\n​\t负数：符号位不变，数值位取反\n补码：\n​\t负数：反码末位+1\n手算的原码补码快速转换快速方法：从右往左第一个1的左边数值位取反\n补码计算\r#\r注意：负数的补码不表示权值，人类无法直接阅读\n加法：诸位相加即可，符号位也参与运算\n减法：取负（无论正负，全部位按位取反末位+1）（从右往左第一个1，左边全部位取反）\n​\t这一点和无符号的减法是一致的，同一套电路即可实现\n特性对比\r#\r补码的表示范围：\r\\( -2^n \\sim 2^n -1 \\)\r，因为补码形式下0只有一种形式：0,000000，而1,0000000表示 \\(-2^n \\)\r，但却没有对应的原码和反码，因此转换规则不使用（或者直接是按位取反溢出不舍弃）\n移码\r#\r补码的符号位取反，等价于\r\\(x\u0026#43;2^n\\)\r，所以其表示范围也是\r\\( -2^n \\sim 2^n -1 \\)\r从小到达排列与无符号一致，使得比大小很方便，一般用于浮点数阶码表示，且只能表示整数\n定点小数\r#\r小数点位置固定为定点数（隐含的并不是真的空出来一位，根据相对位置确定），不固定为浮点数\n定点小数：纯小数，小数点在最高位之前\n定点整数：纯整数，小数点在最低位之前\n定点小数可以用原码、反码、补码表示，而不能用移码\n表示方法和计算和无符号也是一样的，表示范围看上去就是定点整数\r\\(/2^n\\)\r，在形式上完全一致，这就使得计算机的处理方式不变而只需要不同的理解\n"},{"id":1,"href":"/computer_organization/introduction/","title":"第一章 绪论","section":"序","content":"\r绪论\r#\r计算机系统\r#\r计算机系统=硬件+软件，系统的性能主要由软件的效率表征，而软件的发挥与硬件有关\n软件与硬件在逻辑上等效，但硬件实现性能更好\n存储程序概念：指令以二进制形式送入主存，一旦启动就不需要人为干预，自动逐条执行指令\n冯·罗依曼体系结构：\n输入输出设备进行人识别信息-机器识别信息转换\n控制器执行指令的解析，运算器完成运算，指令和数据存放在存储器\n冯以运算器为中心，输入输出都需要经过运算器，影响了效率，所以现代计算机是以存储器为中心：\nCPU = 控制器+运算器，主机不包含辅助存储器（外存是外设）\n层次结构\r#\r计算机系统的多级层次结构，上层看上去是在直接操控计算机\n微指令：理解为硬件的动作\n高级语言 - 汇编语言 - 机器语言\n汇编器：汇编到机器语言 编译器：高级到汇编，有些可以直接到机器语言 解释器：将语句逐条翻译为机器指令（类似同声传译）然后执行，是命令行式的，Python就是这样只不过是脚本的形式 PC存放下一条指令的地址，IR存放当前的指令，从PC到IR需要MDR（存放欲访问的内存地址——，MIR暂存读出来的指令\n性能指标\r#\r主存容量：MAR位数（存储单元个数）和MDR位数（存储单元大小）\n运算速度：\nCPU主频：主时钟信号频率 CPU时钟周期不同于CPU周期（机器周期） CPI, Clock cycle Per Instruction：一条指令需要多少个时钟周期（一般看平均） CPU执行时间 IPS, Instrutions Per Second：每秒执行多条指令 （MIPS，每秒多少百万条） FLOPS, Floating-point Operations Per Second：每秒多少浮点操作 吞吐量：单位时间处理请求的数量（每种请求每钟吞吐量 响应时间 数据通路带宽：数据总线一次能并行传输的信息位数\n字长：进行一次整数运算所处理的二进制数据位数，一般看通用寄存器\n机器字长就是计算机位数，不同于操作系统位数（寻址） 基准程序：跑分软件，跑相同的代码比较性能\n"},{"id":2,"href":"/computer_organization/encode/%E6%B5%AE%E7%82%B9%E6%95%B0/","title":"2.2 浮点数","section":"第二章 编码","content":"\r浮点数\r#\r从科学计数法的思想而来\n表示\r#\r\\[\rN = 尾数M \\times 基数r^{阶码E}\r\\]\r基数隐含是规定值，一般是2\n尾数是定点小数，表现精度；阶码用以推算小数点位置，表现大小\n规格化\r#\r10进制中要求尾数的第一个数为有效值，小数点在其后，在2进制中：\n左规：尾数算术左移直到 第一位（除符号位为）为1，每移动1位阶码也要相应-1 右规：在运算时有效位走到小数点之前，所以需要右移，减小尾数增大阶数 运算\r#\r"},{"id":3,"href":"/computer_organization/encode/","title":"第二章 编码","section":"序","content":"\r数据的表示和运算\r#\r进位计数\n进制转换：\n二进制与8进制、16进制（三位，四位一组） 10进制转： 整数部分：除K取余 小数部分：乘K取整 真值：带正负的数\n机器数：数字化后的真值\n"},{"id":4,"href":"/computer_organization/encode/%E8%BF%90%E7%AE%97/","title":"2.3 运算方法和电路","section":"第二章 编码","content":"\r运算方法和电路\r#\r运算部件\r#\rALU：Arithmetic and Logic Unit，能进行加减运算、逻辑运算和一些移位、取补的操作（控制信号指明）\n门电路实现与或非\n优先级：与 \u0026gt; 或\n异或门实现加法运算\n宏观来看一个加法器应该是这样：\n电路实现\r#\r一位全加器 \\[\rS_i = A_i \\oplus B_i \\oplus C_{i-1} \\\\\rC_i = A_i B_i \u0026#43; (A_i \\oplus B_i)C_{i-1}\r\\]\r电路设计\r↕\r串行进位全加器\n并行进位加法器\n对进位的公式进行了展开，发现了可以进行超前进位的特点，即：\n\\(C_i\\)\r只与 \\(\\{A_i\\}\\)\r，\r\\(\\{B_i\\}\\)\r和\r\\(C_0\\)\r有关\n一般定义 \\(G_i = A_i B_i, \\quad P_i = A_i \\oplus B_i\\)\rCLA部件实现对进位的超前计算，全先行进位加法器的组成：\nCLA部件的电路\r↕\r可发现位数越高电路越复杂，一般也就到4位\r带标志位的加法器\n定义了四个标志位：\n溢出标志OF：最高位的进位\r\\(C_i\\oplus\\)\r次高位的进位\r\\(C_{i-1}\\)\r（只对于有符号数运算有意义） 符号标志SF: 即结果最高位，0表示为正，1为负 （只对于有符号数运算有意义） 进or借位标志CF: \\(C_{out} \\oplus C_{in}\\)\r，即最高位进位和运算符(0为+)的异或 （无符号数有意义）是对无符号数判断是否溢出的标志，而有符号数是看OF 零标志ZF: 结果全为0时为1 移位\r#\r算术移位（有符号数）\r#\r用原码： 即改变位权，对于定点数无法改变小数点位置，所以是向左向右补零，相当于乘除2\n当定点整数向右移动，舍弃的是1时就意味着舍弃了精度\n多想想这个表达式：\n同样也适用于定点小数\n用反码： 负数由于取反，补的是1\n用补码： 负数，最右边的1右边和原码一致，左边和反码一致，左右移动补的是不一样\n总结：\n逻辑移位\r#\r讲操作数视为无符号数进行算术移位\n循环移位\r#\r小循环：不带进位位CF\n大循环：带上CF一起循环\n补码加减\r#\r多路选择器MUX，运算控制信号进行选择，当为减法时选择 \\(\\bar{Y}\\)\r然后进位 \\(C_{in} = 1\\)\r，就实现了取反末位+1的处理\n同样也可以用于无符号的加减运算\n但是判断溢出的方法是不同的\n乘除\r#\r原码一位乘法\r#\r符号位单独处理：取异或\n先加，然后逻辑右移，移到符号位为止\n符号位要修改，ACC和MQ当中处符号位之外的一起\n手算方式\r补码一位乘法\r#\rBooth算法\nMQ多一位辅助位在最后，ACC和X多一个双符号位在前面\nC语言类型转换\r#\r存储和排列\r#\r"},{"id":5,"href":"/computer_organization/storage/","title":"第三章 存储系统","section":"序","content":"\r存储系统\r#\r"},{"id":6,"href":"/computer_organization/instructions/","title":"第四章 指令系统","section":"序","content":"\r指令系统\r#\r"},{"id":7,"href":"/computer_organization/cpu/","title":"第五章 中央处理器","section":"序","content":"\rCPU\r#\r"},{"id":8,"href":"/computer_organization/bus/","title":"第六章 总线","section":"序","content":"\r总线\r#\r"},{"id":9,"href":"/computer_organization/io/","title":"第七章 IO系统","section":"序","content":"\rI/O系统\r#\r"}]