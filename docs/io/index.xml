<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第七章 IO系统 on Computer Organization</title>
    <link>https://zvictorliu.github.io/computer_organization/io/</link>
    <description>Recent content in 第七章 IO系统 on Computer Organization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="https://zvictorliu.github.io/computer_organization/io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>7.1 IO接口</title>
      <link>https://zvictorliu.github.io/computer_organization/io/io%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/io/io%E6%8E%A5%E5%8F%A3/</guid>
      <description>IO接口#功能#数据缓冲
错误或状态监测
控制和定时设备
数据格式转换：串并转换
结构#设备侧：可以一个IO接口连多个设备
主机侧：
主机CPU发送命令字到IO控制寄存器（格式需要设备驱动程序）
主机也可以从状态寄存器读出状态字以获取设备状态信息（轮询or通过控制线发出中断）
主机通过数据缓冲寄存器进行发送或读取
由于IO控制逻辑从控制寄存器读取出命令字之和就不需要了，只用到一次，命令和状态在时间上错开，因此一般状态和控制是同一个寄存器只是数据传输方向不同
各种寄存器被称为IO端口，通过地址线指明对哪个寄存器进行交换（多个设备，每个设备一组寄存器，对不同组的寄存器操作就是对不同设备进行操作）
控制线：CPU发出读写信号，设备发出中断请求
中断类型信号还是经过数据线传递的
IO端口的编址#统一编址：在主存的地址空间，根据地址码的范围就区分了是访存还是访问外设，访问外设的指令和访存是一样的
独立编址：就需要特定的IO指令 IN/OUT N</description>
    </item>
    
    <item>
      <title>7.2 IO控制方式</title>
      <link>https://zvictorliu.github.io/computer_organization/io/io%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/io/io%E6%8E%A7%E5%88%B6%E6%96%B9%E5%BC%8F/</guid>
      <description>IO控制方式#程序查询方式#就传输一大段数据来说：
初始化，设置传输参数 发出命令字以启动 读取状态信息检查，没准备好就继续取-查 准备好，传送一次数据 修改传输参数（计数器） 轮询是否传送完成 例题：检查输入和进行输出（1）鼠标：30次查询一共多少时间占1s的比例
（2）硬盘：1s内传输的 $2 \times 2^{20}B$的数据，每32位就查询一次，一共需要查询多少次，一共多少时间？
轮询：
独占查询 定时查询 程序中断方式#中断检查：
每个指令的末尾都会对中断请求进行检查
中断请求标记寄存器：
中断判优：多个中断的响应顺序
硬件排队器
软件：按优先级查询先处理
中断处理
中断隐指令：
保存原来的PC值（这些是原子操作，需要先关中断）；
获取入口：硬件产生向量地址（中断类型号），根据中断向量找到入口地址
这样的设计便于修改
中断服务程序：
保护现场和恢复现场是在服务程序里面的
前后两段原子操作，中间才是真正的服务
屏蔽字：限制特定的中断不响应，以确保优先级
PSW中的标志位标识现在是开中断还是关中断
补充↕在开中断的情况下使能，设备发出中断到IRR，经过优先权电路选择最先处理的哪个到ISR，将中断类型号通过数据总线告诉CPU，然后使能INTR告诉有中断了DMA方式#组成#DMA控制器：
指明从外设中要读取的地址，以及要存在内存中的地址
从磁盘一个字一个字的读取，所以有一个数据缓冲寄存器，控制器收到一个就放入主存（外设是主动发送），然后修改地址继续
DMA控制器写入主存也占用系统总线，并不是直接相连（单总线结构）
DMA请求：写满一个字后，设备发出DMA请求，DMA控制器收到后去向CPU请求总线使用，得到后就开始向内存写数据
中断请求：当计数器溢出意味着全部传送完，发出中断
传送方式#如果是三总线结构：
就不需要占用系统总线了，但是他可能和CPU对主存的访问冲突
停止CPU访问主存
DMA和CPU交替访存
但是这种由于DMA并不总是经常使用主存，有点浪费CPU周期
周期挪用
CPU没有访存时无冲突使用
CPU正在访存时还在存取周期，那就DMA等待
CPU和DMA同时发出请求，优先满足DMA
传输过程#预处理：CPU完成准备工作，包括测试、设置DMA控制器的寄存器初值等 数据传送 后处理：DMA发出中断，CPU响应，进行校验等等 </description>
    </item>
    
  </channel>
</rss>
