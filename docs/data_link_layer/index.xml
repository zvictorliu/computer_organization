<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第三章 数据链路层 on Computer Networking</title>
    <link>https://zvictorliu.github.io/computer_networking/data_link_layer/</link>
    <description>Recent content in 第三章 数据链路层 on Computer Networking</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://zvictorliu.github.io/computer_networking/data_link_layer/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>3.1 帧的封装</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E7%BB%84%E5%B8%A7/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E7%BB%84%E5%B8%A7/</guid>
      <description>组帧#将数据封装成帧的意义在于，如果出错不必完全重新传所有数据
组帧就是帧的封装，对上层传下来的信息进行封装，添加包含控制信息的帧头和帧尾
传给物理层将帧转成比特流发送出去，而作为接收方要从比特流中提取出一个个帧，就需要帧头帧尾的控制信息，知道什么时候开始什么时候结束，这就是帧定界
透明传输：数据链路层对上层传下来的数据没有任何限制，对于上层来说数据链路层是透明的; 如果数据中有部分和帧定界符意义，就会出现匹配错误，这样就叫对上层有限制了（不能包含和定界符相同的字段）
为实现透明传输的方法：
面向字节的物理链路：字符填充 面向比特的物理链路：比特填充 啥叫面向字节、面向比特？
1 字符计数法#在帧的头部使用一个计数字段，表面帧内的字符数，从而确定帧的结束
但是这样风险比较大，一个有错后面都错了
2 字符填充法#在首尾添加特定的字符
同时如果数据中有同样的字符，为了不误判，需要扫描一遍发现有同样特殊字符后就在其前面添加转义字符
接收时扫到转义字符就知道这个不是数据并且后面也不是特殊字符
如果有和转义字符一样的，也可以通过首次出现来辨别
3 零比特填充#面向比特的协议中使用
采用比特组合01111110来定界，对于数据中同样的部分：扫描，每出现5个连续的1就添加0
接收方扫描，每出现5个连续的1就删除后面的0
4 违规编码#在物理层编码时采用的不同于用作区分01的其它编码方式
比如在曼彻斯特编码中：高to低表示1，低to高表示0，那么就可以用高to高表示开始，低to低表示结束
这样就不需要填充了
前提是编码方式有冗余</description>
    </item>
    
    <item>
      <title>3.2 差错控制</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B7%AE%E9%94%99%E6%8E%A7%E5%88%B6/</guid>
      <description>差错控制#比特差错：即误码，0可能变成1，1可能变成0
一段时间内出错的比特占比即为误码率(Bit Error Rate, BER)
通过差错检测码来检查出是否出现差错，并有相应的纠错措施
检错#奇偶校验#奇偶校验是通常，实际只是选一种
在数据后面添加1位，让整个数据包括校验位在内的1的个数为奇数（奇校验）或者偶数（偶校验）
这种只能在奇数偶数层面判断，并不能定位，也有范围限制（漏检）
循环冗余码#循环冗余码CRC
规定多项式 构造被除数：在待发送信息后面添加生成多项式阶数个0 构造除数：生成多项式各项系数（只有01）构成的比特串 除法，计算冗余码 补全余数使得位数和阶数相同（在前面补零），叫做帧检验序列FCS 在FCS放在待发送数据之后发送
接收方对收到数据除法，余数为0则说明没有误码
纠错#</description>
    </item>
    
    <item>
      <title>3.3 可靠传输机制</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93/</guid>
      <description>可靠传输机制#数据链路层提供的服务可分两种：
不可靠传输：仅丢弃有误码的帧，其它什么都不做 有线链路误码率低所以一般是提供的不可靠服务 这里不可靠但是上层还是可以变可靠 可靠传输：要确保发送端发的接收端都能收到，一般需要重传 无线链路易受干扰 开销会比较大 差错也不只比特差错，但就数据链路层来说就考虑可靠传输
实现可靠传输的机制（不只适用于数据链路层）：
停止-等待协议 SW#基于互联网通信
收到后发送信息告知是否正确收到：
但是如果DATA丢失了，就一致等不到确认信号
所以一般会设置一个超时计时器
如果确认丢失了，那么发送端超时重传，为了区分是同样还是重传，会设置一个编号
进一步，确认也有编号（应对迟到情况，不够这种情况几乎不可能发生）
之间需要等待太多时间，信道利用率比较低
回退N帧协议 GBN#流水线方式
给序号的比特数，决定序号范围
发送端，接收端各设置一个（循环）滑动窗口
发送端把滑动窗口内序号的分组依次连续发送 ，无需等待发送，窗口长度范围为 \(1 \leq W_T \leq 2^n -1\)（如果超过范围会出现无法分辨重传和新数据的情况）
接收端窗口长度为1，接收窗口内的分组，因为是1所以就是依次按顺序接收，每接收一个，向前滑动一个位置
如果只对按序到达的最后一个分组发送确认，这叫累积确认
一个分组出现误码，丢弃，发送一个带编号的ACK（最后一个正确接收的编号），而后面的和窗口值对不上，也被丢弃，也都发送一个ACK
发送方收到多个重复确认就知道该重传了，而不必等待超时计时器
具体发送端窗口的移动应该是根据ACK的编号来移到相应位置的，当窗口内没有已发送时就继续发送
选择重传协议 SR#仅重传有真的有差错的，不牵连后面的
逐一确认
接收窗口大于1，先接收【失序但是没有误码且序号在窗口内的】
超范围：无法区分新旧，分组重复
md这里面太细节了，文字描述不清楚
视频最好自己演练一下</description>
    </item>
    
    <item>
      <title>3.4 介质访问控制</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E4%BB%8B%E8%B4%A8%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6/</guid>
      <description>介质访问控制#隔离在同一信道上传输的来自其它结点的信号，即决定广播信道中信道的分配
信道划分#其实就是多路复用技术
频分多路复用#时分多路复用#波分多路复用#码分多路复用#随机介质访问#ALOHA协议#CSMA协议#CSMA/CD协议#CSMA/CA协议#轮询#令牌传递协议</description>
    </item>
    
    <item>
      <title>3.5 局域网与广域网</title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%B9%BF%E5%9F%9F%E7%BD%91/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E5%B1%80%E5%9F%9F%E7%BD%91%E4%B8%8E%E5%B9%BF%E5%9F%9F%E7%BD%91/</guid>
      <description>局域网与广域网#LAN#以太网#无线局域网#VLAN#广域网#PPP协议#用户与ISP连接所用协议</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/computer_networking/data_link_layer/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_networking/data_link_layer/%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
