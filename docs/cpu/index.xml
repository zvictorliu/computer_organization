<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第五章 中央处理器 on Computer Organization</title>
    <link>https://zvictorliu.github.io/computer_organization/cpu/</link>
    <description>Recent content in 第五章 中央处理器 on Computer Organization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="https://zvictorliu.github.io/computer_organization/cpu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>5.1 指令执行过程</title>
      <link>https://zvictorliu.github.io/computer_organization/cpu/%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/cpu/%E6%8C%87%E4%BB%A4%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B/</guid>
      <description>指令执行过程#指令周期#取、译码（很快）、执行，将译码也分在取指令周期内：
CPU周期和CPU时钟周期不是一个意思
CPU周期又叫机器周期，一个指令周期需要多个机器周期，一个多个机器周期需要多个时钟周期（又叫节拍），主频也是描述的这个
不同指令的指令周期的长度可能是不同的：
整个流程是：
设置了几个触发器来判断处于哪个阶段，不同阶段的任务、理解不同
取指周期#(PC) -&amp;gt; MAR
CU发出读控制信号：1 -&amp;gt; R
M(MAR) -&amp;gt; MDR，(MDR) -&amp;gt; IR
CU发出控制信号，使得(PC)+1 -&amp;gt; PC
间址周期#复制得到有效地址，并不取出操作数
将地址码送入MAR，可以从IR中得到也可以从MDR中得到，Ad(IR) -&amp;gt; MAR CU发出读信号 &amp;hellip; （将有效地址送给地址码） 执行周期#不同指令的执行周期不同
中断周期#执行完后都会进行中断检查，如有则执行中断程序
SP存的是地址，SP-1后即为PC指要放入的地址
(SP)-1 -&amp;gt; SP，(SP) -&amp;gt; MAR，1 -&amp;gt; W，(PC) -&amp;gt; MDR
然后修改PC：向量地址 -&amp;gt; PC
指令执行方案#单指令周期：串行执行，统一时间，木桶效应 多指令周期：不要求定长 流水线：没有冲突的硬件情况下，可以并行，交错一些阶段 </description>
    </item>
    
    <item>
      <title>5.2 数据通路</title>
      <link>https://zvictorliu.github.io/computer_organization/cpu/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/cpu/%E6%95%B0%E6%8D%AE%E9%80%9A%E8%B7%AF/</guid>
      <description>数据通路#数据的流动
微操作信号发生器 发生不同的控制信号，使得数据流动
数据流动方向#寄存器之间#本质上是电路，CU的控制信号选择开关决定能流向哪里
PCout有效，(PC) -&amp;gt; Bus
MARin有效，Bus -&amp;gt; MAR
主存与CPU之间#CU需要发出 读or写信号，一般没有画出但需要知道
算术逻辑运算#ALU需要两个操作数，但是单总线结构同时只能传一个，孤儿有暂存寄存器Y，先把一个传到Y，Y和ALU直接相连，再把另一个传给ALU
每一个微操作至少花费一个时钟周期
()表示内容，也可能表示间接寻址
(PC)+1 -&amp;gt; PC 是自动完成的，一般不经过ALU，没有去考虑它的控制信号
专用数据通路#直接连接，不会有冲突，但是要多路的选择</description>
    </item>
    
    <item>
      <title>5.4 指令流水线</title>
      <link>https://zvictorliu.github.io/computer_organization/cpu/%E6%B5%81%E6%B0%B4%E7%BA%BF/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/cpu/%E6%B5%81%E6%B0%B4%E7%BA%BF/</guid>
      <description>指令流水线#对指令单纯串行执行顺序的优化
没有硬件冲突的阶段
设指令都分三个阶段，每个阶段时间长度相等
顺序执行方式 一次重叠 执行阶段和下一条指令的取指令阶段没有冲突，就可以重叠
只有第一条是完整的$3t$，而后每条实际只占$2t$
二次重叠 这是比较理想的情况
指令流程图用以分析影响因素 时空图用以评价性能
性能指标#理想情况下：
吞吐率TP：单位时间内完成的任务数量，一般就是指令的数量，一般用时空图比较好看 $$TP = \frac{n}{(k+n-1)*\Delta t}$$一般$\Delta t$取一个时钟周期加速比S：同样一批任务不使用流水线与使用流水线的时间之比 $$ S = \frac{T_0}{T_k} = \frac{nk}{k+n-1} $$
效率E：硬件设备的利用率
红色区域内是处于忙碌阶段
影响因素#典型的五段式划分：
取指 - 译码 - 执行 - 访存 - 回写
五个阶段的机器周期统一设置为最长耗时的那个
为了补充多出来的时间不提前进入下一个阶段，在之间设置了缓冲寄存器暂存
取指：从指令cache取，基本都能找到（姑且先认为都能找到吧），而且和数据cahce分开从而能够并行
译码：还包括从通用寄存器取出操作数
Imm就是存立即数的
写回：也有可能是写回寄存器
冲突的可能性#结构相关（资源冲突） 各个阶段用到的硬件资源分别是：主存（把cache也当作主存了） - 寄存器 - ALU - 主存 - 寄存器
冲突：
解决办法：暂停等待 or 资源重复配置，比如指令和数据放到不同的两个cache中</description>
    </item>
    
    <item>
      <title>5.5 多处理器</title>
      <link>https://zvictorliu.github.io/computer_organization/cpu/%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/cpu/%E5%A4%9A%E5%A4%84%E7%90%86%E5%99%A8/</guid>
      <description>多处理器#多处理器#SSID#SISD：单指令流单数据流，同一时刻内只能处理一两个数据
SIMD#SIMD：单指令流多数据流，对结构类似的大量数据进行相同处理（图像处理分块处理）
向量处理机：处理对象是以向量为单位的
矩阵运算，向量ALU
MISD#MISD：多指令流单数据流
同时执行多条指令但处理同一个数据，实际不存在
MIMD#MIMD：多指令流多数据流
各个指令序列并行执行，各种处理不同的数据
多处理器系统：右称共享内存多处理器、片级多处理器
多计算机系统：
硬件多线程#传统不支持多线程的处理器：需要保护现场存到主存
而支持的就有多个寄存器组：
细粒度多线程#多线程轮流交叉执行指令，可以乱序并行执行（指令级）
每一个时钟周期切换一次线程
粗粒度多线程#在一个线程出现了较大开销时才切换线程，指令级并行
同时多线程#就是线程级完全并行执行</description>
    </item>
    
  </channel>
</rss>
