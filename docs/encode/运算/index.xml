<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>2.3 运算方法和电路 on Computer Organization</title>
    <link>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/</link>
    <description>Recent content in 2.3 运算方法和电路 on Computer Organization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E5%8A%A0%E5%87%8F/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E5%8A%A0%E5%87%8F/</guid>
      <description>加法器#宏观来看一个加法器应该是这样：
一位全加器#$$ S_i = A_i \oplus B_i \oplus C_{i-1} \\ C_i = A_i B_i + (A_i \oplus B_i)C_{i-1} $$ 电路设计↕串行进位全加器#并行进位加法器#对进位的公式进行了展开，发现了可以进行超前进位的特点，即：
$C_i$ 只与 ${A_i}$，${B_i}$和$C_0$有关
一般定义 $G_i = A_i B_i, \quad P_i = A_i \oplus B_i$
CLA部件实现对进位的超前计算，全先行进位加法器的组成：
CLA部件的电路↕可发现位数越高电路越复杂，一般也就到4位带标志位的加法器#定义了四个标志位：
溢出标志OF：最高位的进位$C_i\oplus$次高位的进位$C_{i-1}$（只对于有符号数运算有意义） 符号标志SF: 即结果最高位，0表示为正，1为负 （只对于有符号数运算有意义） 进or借位标志CF: $C_{out} \oplus C_{in}$，即最高位进位和运算符(0为+)的异或 （无符号数有意义）是对无符号数判断是否溢出的标志，而有符号数是看OF 零标志ZF: 结果全为0时为1 补码加减#多路选择器MUX，运算控制信号进行选择，当为减法时选择 $\bar{Y}$ 然后进位 $C_{in} = 1$，就实现了取反末位+1的处理</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E7%A7%BB%E4%BD%8D/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E7%A7%BB%E4%BD%8D/</guid>
      <description>移位#算术移位（有符号数）#用原码： 即改变位权，对于定点数无法改变小数点位置，所以是向左向右补零，相当于乘除2
当定点整数向右移动，舍弃的是1时就意味着舍弃了精度
多想想这个表达式：
同样也适用于定点小数
用反码： 负数由于取反，补的是1
用补码： 负数，最右边的1右边和原码一致，左边和反码一致，左右移动补的是不一样
总结：
逻辑移位#讲操作数视为无符号数进行算术移位
循环移位#小循环：不带进位位CF
大循环：带上CF一起循环</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E4%B9%98%E9%99%A4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E4%B9%98%E9%99%A4/</guid>
      <description>乘法#原码一位乘法#符号位单独处理：取异或
先加，然后逻辑右移，移到符号位为止
符号位要修改，ACC和MQ当中处符号位之外的一起
手算方式补码一位乘法#Booth算法
MQ多一位辅助位在最后，ACC和X多一个双符号位在前面
在最后还会再加一次
在电路上，有专门的辅助电路帮助进行
除法#原码-恢复余数法#取绝对值进行计算，符号位单独来
设商为1，进行减法计算，发现为负值，恢复余数，改为0
逻辑左移
原码-加减交替法#补码-加减交替法#双符号位参与计算
最后一位商恒置为1
天，这里怎么可能记得住</description>
    </item>
    
    <item>
      <title></title>
      <link>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E5%85%B6%E5%AE%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/encode/%E8%BF%90%E7%AE%97/%E5%85%B6%E5%AE%83/</guid>
      <description>C语言类型转换#C语言中定点整数都是补码表示（除非有unsigned）
有符号和无符号转换：理解方式不一样而已
不同字长：裁剪，符号扩展
存储和排列#大小端模式#大端：MSB存入低地址
小段：LSB存入低地址
边界对齐#字地址和字节地址
每次访存只能读写1个字
空间换时间</description>
    </item>
    
  </channel>
</rss>
