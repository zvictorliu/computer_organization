<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>第六章 总线 on Computer Organization</title>
    <link>https://zvictorliu.github.io/computer_organization/bus/</link>
    <description>Recent content in 第六章 总线 on Computer Organization</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language><atom:link href="https://zvictorliu.github.io/computer_organization/bus/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>6.1 总线结构</title>
      <link>https://zvictorliu.github.io/computer_organization/bus/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/bus/%E7%B3%BB%E7%BB%9F%E6%80%BB%E7%BA%BF%E7%BB%93%E6%9E%84/</guid>
      <description>系统总线结构#单总线结构
争用、不能多个设备并行发送，带宽低；速度不匹配
双总线结构
通道对IO设备的管理（也是一种控制器，也有通道程序存在主存）
支持突发传输（传输一个地址得到连续的多个数据）
三总线结构
DMA进行传输，缓和速度矛盾
IO设备对CPU的响应也更快，无需经过通道
补充：现代的四总线结构↕桥接器用做数据缓冲和转换、以及仲裁分配总线使用权</description>
    </item>
    
    <item>
      <title>6.2 性能指标</title>
      <link>https://zvictorliu.github.io/computer_organization/bus/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/bus/%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87/</guid>
      <description>性能指标#总线周期：申请 - 寻址 - 传输 - 结束，即一次总线操作所需要的时间
工作频率：1 / 总线周期
总线时钟周期：机器的时钟周期（现代的可能是桥接器的时钟周期），和总线周期不一样
总线时钟频率
总线宽度：一般指数据总线的根数
总线带宽：数据传输率，单位时间内可以传输多少bit或者字节的数据
有效数据传输速率不包括校验位那些bit
总线复用
信号线数：三种总线数的总和
(1)
每个时钟周期传两次数据，意思就是一个时钟周期=2个总线周期
工作频率为 $2 \times 66MHz$，宽度为32位，所以带宽是 $32 * 2 * 66MHz$
(2)
传地址占一个时钟周期（突发只传一次）
传128位数据，宽度为32位所以需要传4次即4个总线周期，即2个时钟周期
一个三个时钟周期</description>
    </item>
    
    <item>
      <title>6.3 操作与定时</title>
      <link>https://zvictorliu.github.io/computer_organization/bus/%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://zvictorliu.github.io/computer_organization/bus/%E4%BA%8B%E5%8A%A1%E5%92%8C%E5%AE%9A%E6%97%B6/</guid>
      <description>操作与定时#操作：
申请阶段：传输请求和总线仲裁
寻址阶段
传输阶段
结束阶段：让出使用权
这四个操作的时间配合即为总线定时
同步通信#统一时钟控制数据传输
T1：主设备发出地址信号
T2：发出读命令，从设备根据地址和读命令知道是自己，于是赶紧准备数据（必须赶在T3上升沿之前）
T3：从设备把数据放入总线
T4：主设备撤销读命令
这种强制性同步不能及时进行有效性校验；速度矛盾更明显
异步通信#应答方式
主设备发送请求，从设备发送应答
不互锁
主设备获得控制权后发出请求信号，等一段时间后就会撤销请求，同样从设备应答一段时间就会撤销，并不会一直等待
半互锁
主设备必须收到应答才会撤销请求，但从设备还是自动撤销
全互锁
都必须等待对方，即从设备也要等待主设备的请求撤销后才撤销应答信号
补充↕半同步通信#统一时钟但是增加一个等待响应信号，当从设备准备好后才读
分离式通信#慢速的从设备在准备数据时总线空闲
于是在此阶段主设备就放弃总线控制权给其它设备，从设备准备好再申请控制权</description>
    </item>
    
  </channel>
</rss>
